# Get script directory
$scriptDir = Split-Path -Parent $MyInvocation.MyCommand.Path
Set-Location $scriptDir

$filePath = Join-Path $scriptDir "nv-kernel.o_binary"
$backupPath = $filePath + ".backup"

# Check if file exists
if (-not (Test-Path $filePath)) {
    Write-Host "Error: File not found: $filePath"
    Read-Host "Press Enter to exit"
    exit
}

# Create backup
Copy-Item $filePath $backupPath -Force
Write-Host "Backup created: $backupPath"

# Read file
$bytes = [System.IO.File]::ReadAllBytes($filePath)

# Define search and replace patterns
$patterns = @(
    @{
        Search = @(0x07, 0x1B, 0x07, 0x00, 0x87, 0x1B, 0x07, 0x00, 0xC7, 0x1B, 0x07, 0x00, 0x07, 0x1C, 0x07, 0x00, 0x09, 0x1C, 0x07, 0x00)
        Replace = @(0xFF, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00)
        Name = "Pattern 1"
    }
    @{
        Search = @(0x09, 0x1E, 0x07, 0x00, 0x49, 0x1E, 0x07, 0x00, 0xBC, 0x1E, 0x07, 0x00, 0xFC, 0x1E, 0x07, 0x00, 0x0B, 0x1F, 0x07, 0x00, 0x81, 0x20, 0x07, 0x00, 0x82, 0x20, 0x07, 0x00, 0x83, 0x20, 0x07, 0x00, 0xC2, 0x20, 0x07, 0x00, 0x89, 0x21, 0x07, 0x00, 0x0D, 0x22, 0x07, 0x00, 0x4D, 0x22, 0x07, 0x00, 0x8A, 0x24, 0x07, 0x00)
        Replace = @(0xFF, 0xFF, 0x07, 0x00, 0x49, 0x1E, 0x07, 0x00, 0xBC, 0x1E, 0x07, 0x00, 0xFC, 0x1E, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0x81, 0x20, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0x83, 0x20, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00, 0x4D, 0x22, 0x07, 0x00, 0xFF, 0xFF, 0x07, 0x00)
        Name = "Pattern 2"
    }
    @{
        Search = @(0x05, 0x22, 0x00, 0x00, 0x09, 0x22, 0x00, 0x00, 0x14, 0x22, 0x00, 0x00, 0x17, 0x22, 0x00, 0x00)
        Replace = @(0xFF, 0xFF, 0x00, 0x00, 0x09, 0x22, 0x00, 0x00, 0x14, 0x22, 0x00, 0x00, 0x17, 0x22, 0x00, 0x00)
        Name = "Pattern 3"
    }
    @{
        Search = @(0x01, 0x25, 0x00, 0x00, 0x05, 0x25, 0x00, 0x00, 0x09, 0x25, 0x00, 0x00, 0x40, 0x25, 0x00, 0x00)
        Replace = @(0xFF, 0xFF, 0x00, 0x00, 0x05, 0x25, 0x00, 0x00, 0x09, 0x25, 0x00, 0x00, 0x40, 0x25, 0x00, 0x00)
        Name = "Pattern 4"
    }
    @{
        Search = @(0x85, 0x27, 0x00, 0x00, 0xAF, 0x27, 0x00, 0x00, 0xBF, 0x27, 0x00, 0x00, 0xC2, 0x27, 0x00, 0x00)
        Replace = @(0xFF, 0xFF, 0x00, 0x00, 0xAF, 0x27, 0x00, 0x00, 0xBF, 0x27, 0x00, 0x00, 0xC2, 0x27, 0x00, 0x00)
        Name = "Pattern 5"
    }
    @{
        Search = @(0xAF, 0x26, 0x00, 0x00, 0xB0, 0x26, 0x00, 0x00, 0xBF, 0x26, 0x00, 0x00, 0xC1, 0x26, 0x00, 0x00)
        Replace = @(0xFF, 0xFF, 0x00, 0x00, 0xB0, 0x26, 0x00, 0x00, 0xBF, 0x26, 0x00, 0x00, 0xC1, 0x26, 0x00, 0x00)
        Name = "Pattern 6"
    }
)

$totalFound = 0

# Process each pattern
foreach ($pattern in $patterns) {
    $searchPattern = $pattern.Search
    $replacePattern = $pattern.Replace
    $patternLength = $searchPattern.Length
    $found = 0

    Write-Host "`nSearching: $($pattern.Name)"

    # Search and replace
    for ($i = 0; $i -le ($bytes.Length - $patternLength); $i++) {
        $match = $true
        for ($j = 0; $j -lt $patternLength; $j++) {
            if ($bytes[$i + $j] -ne $searchPattern[$j]) {
                $match = $false
                break
            }
        }
        if ($match) {
            Write-Host "  Found at offset: 0x$($i.ToString('X')) ($i)"
            for ($j = 0; $j -lt $patternLength; $j++) {
                $bytes[$i + $j] = $replacePattern[$j]
            }
            $found++
            $totalFound++
            $i += $patternLength - 1
        }
    }

    if ($found -eq 0) {
        Write-Host "  No matches found"
    } else {
        Write-Host "  Replaced: $found occurrence(s)"
    }
}

if ($totalFound -gt 0) {
    [System.IO.File]::WriteAllBytes($filePath, $bytes)
    Write-Host "`n=== SUCCESS ==="
    Write-Host "Total replacements: $totalFound"
} else {
    Write-Host "`nNo patterns found in file."
}

Write-Host "`nPress Enter to exit..."
Read-Host